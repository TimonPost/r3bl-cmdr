test 2 col layout:
  âœ” refactor DEBUG & raw mode & TWCommand @done(22-07-04 20:06)
  âœ” make sure that the colors work as expected (Color::Red, Color::Rgb, etc) @done(22-07-03 19:43)
  âœ” row calculation seems wrong (too much space on top of the rendered output) @done(22-07-04 15:10)
  âœ” clean up decl macros w/ repetitions `tw_command.rs`, `file_logging.rs`, `decl_macros.rs` @done(22-07-04 20:23)
  âœ” emit clear screen & reset color commands before rendering each frame (artifacts appear on resize) @done(22-07-04 21:00)
  âœ” does margin (cols) work as expected? (different in vscode terminal vs real terminal) @done(22-07-07 13:41)
  âœ” make sure that the attributes work as expected (dim, strike through, etc) @done(22-07-29 13:14)
  âœ” handle situation when cursor is moved PAST the bounds of the window (< 0 or > max) @done(22-07-29 13:14)
    - add row and col offset?
    - track cursor position?
    - Example: https://github.com/nazmulidris/cli-editor/blob/main/src/main.rs

add layout engine:
  âœ” merge `tw_area_test.rs` + `app_without_layout.rs` -> `app_with_layout.rs` @done(22-07-03 16:47)
  âœ” make sure to save `app_without_layout.rs` for future use w/ routing below @done(22-07-03 16:26)
  âœ” rename `tw_area.rs` to `tw_surface` and `TWArea` to `TWSurface` @done(22-07-04 20:27)
  âœ” paint state & use lolcat @done(22-07-29 13:13)
  
graphemes:
  âœ” handle graphemes in truncate @done(22-07-27 11:26)
    - currently in `Size`, should be moved into separate module
    - add graphemes to tui_core in r3bl_rs_utils
  âœ” `unicode-width` crate @done(22-07-29 13:12)
  âœ” Update `tw_surface.rs::print_inside_box()` to support graphemes & text wrapping @done(22-07-29 13:12)
  
think about containers, containment, and keyboard focus management:
  âœ” move cursor to relative & absolute (ðŸ”± move-cursor-rel-abs) @done(22-07-17 11:53)
    - the pos + size of a box is provided to a *component* 
    - the *component* paints itself thinking it starts at 0, 0 
    - the *component* is actually relative to the box when it is rendered 
    - add TWCommands to handle above: 
      - `MoveCursorPositionAbs(Position)`
      - `MoveCursorPositionRelTo(Position, Position)`
    - rename `Render` to `TWApp`
  âœ” add support for focus management to state (ðŸ”± state-focus-mgmt) @done(22-07-19 11:03)
    - need to accommodate handling of focus & what is currently in focus
    - introduce trait `StateManageFocus` w/ 2 methods: 
      - `get_focus_id(): str`
      - `set_focus_id(id: str)`
  âœ” add new trait `RenderComponent` (ðŸ”± better-box-containment) @done(22-07-21 17:45)
    - files: 
      - `tw_surface.rs`, 
      - `tw_app.rs`, 
      - `app_with_layout.rs`
    - separate the logic of painting from the app
    - take box-origin-pos & content-size as input?
    - paint things that are relative to box-origin-pos?
    - each component should handle its own input event (when it has focus)
  âœ” clean up old stuff that has been replace by `RenderComponent` @done(22-07-27 11:26)

example handling:
  âœ” create a simple way of asking user for which ex to run @done(22-07-15 14:11)
  âœ” use simple readline and then route the request to the correct ex @done(22-07-15 14:11)
  âœ” separate `sample_app` into: `ex_no_layout` & `ex_with_layout` @done(22-07-15 14:11)
  âœ” stub out `ex_with_editor` @done(22-07-15 14:11)

impl styling support:
  âœ” impl `tw_area.rs::paint_inside_box()` to emit `TWCommand::Print` @done(22-06-28 20:40)
  âœ” clean up `base_units.rs` w/ macro @done(22-06-29 11:07)
  âœ” clean up `tw_box.rs` and remove needless `Option` wrapper for properties @done(22-06-29 20:23)
  âœ” fix position calc `tw_area.rs::paint_inside_box()` using origin @done(22-06-29 20:26)
  âœ” impl `cmd_wrapper.rs::TWCommand::Print(..., style)` -> Attribute @done(22-06-30 19:21)
  âœ” impl `cmd_wrapper.rs::TWCommand::ApplyStyle(style)` -> Color @done(22-06-30 19:21)
  âœ” impl `tw_area.rs::paint_inside_box()` to emit styling commands @done(22-06-30 19:21)
  âœ” update test_tw_area.rs to pretty print `TWCommandQueue` @done(22-06-30 19:22)
  âœ” use clippy to refactor all of `r3bl_rs_utils` @done(22-07-01 21:20)
  âœ” add serde support to `TWCommandQueue` & add `test_serde.s` @done(22-07-01 21:20)
  âœ” update `test_tw_area.rs` w/ real styles (different margins, colors, attributes) @done(22-07-02 18:56)

clean up naming:
  âœ” rename [Canvas] to [TWArea] @done(22-06-27 19:51)
  âœ” rename [Layout] to [TWBox] @done(22-06-27 19:51)
  âœ” update all tests and comments to match @done(22-06-27 19:51)

add lolcat:
  âœ” figure out lolcat.rs src @done(22-06-26 12:12)
  âœ” color wheel algo @done(22-06-26 12:12)
  âœ” draw text w/ different colors (look at lolcat crate) @done(22-06-26 12:12)
  âœ” integrate `~/github/lolcat_rs` crate into tui project @done(22-06-26 12:12)

render:
  âœ” figure out how to create VDOM like result -> CommandQueue @done(22-06-19 18:44)
  âœ” rename Draw -> Render @done(22-06-20 15:35)
  âœ” accommodate Render returning CommandQueue @done(22-06-20 15:35)
  âœ” app.rs render the state using CommandQueue (and crossterm commands) @done(22-06-21 17:51)
  âœ” main_container.rs actually flush CommandQueue in MySubscriber @done(22-06-2118:33)
  âœ” do initial render in event loop @done(22-06-21 19:04)
  âœ” fix bug that drops input_events (gh-issues: #1) @done(22-06-22 17:02)
  âœ” fix bug - resize event does not trigger a redraw (gh-issues: #2) @done(22-06-23 10:05)
  âœ” main_event_loop.rs - pass in mut vec of keyevents to exit on (gh-issues: #3) @done(22-06-23 13:31)

redux:
  âœ” create store, state, attach reducer and pass it (create_store.rs) @done(22-06-17 18:04)
  âœ” in start_event_loop() add subscriber to store @done(22-06-17 18:04)
  âœ” `main_container.rs`: clean up TODOs & logic @done(22-06-18 09:29)
  âœ” `app_draw.rs`: dispatch actions on certain keypresses @done(22-06-18 16:35)
  âœ” `main_container.rs` -> subscriber: state change results in draw() call @done(22-06-18 16:35)

lifecycle & organization:
  âœ” use electron architecture & terminology as baseline @done(22-06-15 15:40)
  âœ” figure out how to bootstrap the entire tui framework @done(22-06-15 15:40)
  âœ” separate concerns (terminal window, app, state, etc) @done(22-06-15 17:36)
  âœ” integrate Draw trait object @done(22-06-15 17:36)
  âœ” Draw -> separate draw(store) and handle_event(input_event, store) @done(22-06-16 14:59)
  âœ” also pass store to the draw trait methods @done(22-06-17 17:30)

publish placeholder on crates.io:
  âœ” publish r3bl-cmdr crate as placeholder @done(22-06-15 11:15)
  âœ” move repo from: nazmulidris/rust-scratch/tui-layout-crossterm to: r3bl_org/r3bl-cmdr @done(22-06-15 11:15)

logging:
  âœ” fix it @done(22-06-11 12:24)

figure out how to use crossterm:
  clean up:
    âœ” rewrite dimens.rs using `From` and `TryFrom` @done(22-06-04 17:53)
    âœ” log keypress (don't print) @done(22-06-07 15:07)
  async vs blocking vs polling:
    âœ” polling is inefficient and takes up tons of CPU @done(22-06-05 20:09)
    âœ” try get async crossterm event read working w/ tokio @done(22-06-07 15:07)
       https://github.com/crossterm-rs/crossterm/blob/master/examples/event-stream-tokio.rs
  generate `output_commands` (in `Canvas`) for crossterm:
    âœ” reset screen: clear & move cursor to top left @done(22-06-08 16:08)
    âœ” support queueing commands vs immediate execution w/ macro @done(22-06-08 23:26)

layout & position w/ styling support:
  âœ” impl positioning of layouts w/ margin @done(22-05-29 11:13)
    âœ” in test_canvas.rs, @done(22-05-29 11:13)
    âœ” in layout.rs @done(22-05-29 11:13)
  âœ” update tests to match above @done(22-05-29 11:13)

styling for layout engine:
  âœ” create style struct @done(22-05-20 19:06)
  âœ” impl lazy eval macro (in r3bl_rs_utils), and use it in Style @done(22-05-21 10:40)
  âœ” impl lazy executor trait for r3bl_rs_utils @done(22-05-21 10:40)
  âœ” concept of styling for layout (margin, fg color, bg color, focus highlight) @done(22-05-21 10:44)

stylesheets:
    âœ” extend style to have an id field @done(22-05-22 09:55)
    âœ” create a stylesheet struct @done(22-05-22 11:27)
    âœ” write test @done(22-05-22 12:03)
    âœ” attach it to canvas @done(22-05-23 16:07)
    layout.rs:
      âœ” extend it to have vec of style id's @done(22-05-24 12:50)
    canvas.rs: Canvas, LayoutManager & their test:
      âœ” pass stylesheet in to Canvas @done(22-05-24 13:04)
      âœ” introduce BoundsProps (for LayoutManager) @done(22-05-24 14:56)
      âœ” update LayoutProps to handle styles @done(22-05-24 16:08)
      âœ” use LayoutProps in LayoutManager trait @done(22-05-24 16:08)
      âœ” pass styles into LayoutManager @done(22-05-24 16:08)
    style.rs, test_style.rs, & test_canvas.rs:
      âœ” impl `Add` trait for `Style` @done(22-05-25 12:26)
      âœ” update test_style.rs to use `Add` trait @done(22-05-25 14:59)
      âœ” update test_canvas.rs to use cascading styles @done(22-05-26 13:07)

layout engine in lib:
  âœ” create `BoxPosition` and `BoxSize` structs @done(22-04-30 11:38)
  âœ” test `BoxPosition` and `BoxSize` structs @done(22-05-01 19:03)
  âœ” create `engine.rs` & `Canvas` interface @done(22-05-01 19:09)
  âœ” create `Canvas` implementation `box_canvas.rs` @done(22-05-04 20:03)
    âœ” use crate to implement `PerCent` bounded range unsigned integer type @done(22-05-02 11:30)
    âœ” create `LayoutError` struct and `LayoutErrorType` enum @done(22-05-02 11:44)
    âœ” implement `LayoutManager` for `Canvas` @done(22-05-04 20:01)
      âœ” handle root layout @done(22-05-03 17:07)
      âœ” handle normal layout @done(22-05-04 20:01)
  âœ” create test for `box_canvas.rs` for a simple 2 column layout @done(22-05-17 16:23)

logging:
  âœ” find suitable logging crates: `log` and `simple-logging` @done(22-04-25 09:48)
  âœ” use file logging until layout engine supports debug output in TUI @done(22-04-27 21:16)

fix simplelog crate fail when using Tokio:
  âœ” https://github.com/r3bl-org/r3bl-rs-utils/commit/1a6308f5effd2504d60db2e896c431a0262db1a1 @done(22-04-30 08:11)
