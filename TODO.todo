╭┄┄┄┄┄┄┄┄┄┄┄╮
│ r3bl-cmdr │
╯           ╰┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄
focus mgmt support:
  ✔ extend `StateManageFocus` (🔱 statemanagefocus-cursor-support) @done(22-07-27 18:36)
    - add methods that allow access to a `HashMap<String, Position>`
    - an `id: String` is not enough to store in the `StateManageFocus` trait
    - each `id` may have a `Position` associated with it
    - this is used to draw the "cursor" (whatever that means to a `RenderComponent`)
      - for an editor, it will be the insertion point
      - for a text viewer, it will be the cursor position which can be moved around
    - add `StateManageFocusData` and fix needless `Hash` trait bound propagation in `r3bl_rs_utils`
  ✔ what should input handling specificity be? (🔱 input-event-specificity) @done(22-07-28 14:40)
    - Currently the `DefaultInputEventHandler` does not consume input events and it peeks at them
    - There isn't a way for apps to override any container defaults
    - Should this be inverted? Apps get first dibs input event & consume if they handle it?
  ☐ route input events based on who has focus (🔱 input-event-routing)
  ☐ manage a registry of `RenderComponent` after first render pass?
    - pass input events to the id -> `RenderComponent` that has focus?
  ☐ add method to `RenderComponent` trait to handle input even & return an enum (consumed / not)?

graphemes & focus mgmt support demo:
  ☐ create a POC `RenderComponent` that shows a cursor & graphemes
    - display a string eg: `Hi 📦 🙏🏽 👨🏾‍🤝‍👨🏿.`
    - allow component to have focus
    - allow component to have a cursor position
    - show cursor moving around the string (respecting grapheme clusters)
      - use JT's approach that's outlined in the README.md? or use `UnicodeStringExt`?
  ☐ implement simplest editor component (single line text field)
  ☐ implement simplest checkbox selection component (modal?)
    
introduce first DSL (JSX-like syntax):
  ✔ implement `style!` proc macro as first DSL JSX like syntax for TUI @done(22-07-06 15:29)
  ✔ split `tui_core` from `tui` and move it into `r3bl_rs_utils` @done(22-07-06 15:29)
  ✔ replace all use of `Style` with this macro @done(22-07-06 16:05)
  ☐ write DL tutorial on create DSL in Rust
    - based on: https://github.com/r3bl-org/r3bl-rs-utils/blob/main/macro/src/make_style/mod.rs
    - create tui category in DL
    - make sure to publicize this article on mailchimp, reddit, users.rust-lang.org
    
support for text wrapping:
  ☐ `textwrap` crate

routing:
  ☐ introduce routing concept to switch between apps (with + without layout)
  
pre built components - editor:
  ☐ example editor Sodium: https://github.com/redox-os/sodium
  ☐ syntax highlighting video: https://youtu.be/4vw5iJMLQx0
  ☐ syntax highlighting crate: https://docs.rs/syntect/latest/syntect/
  ☐ scrolling: data buffer, cursor pos (row, col), scrolling (row offset, col offset)
    - [src](https://github.com/nazmulidris/cli-editor/blob/main/src/main.rs)
    - [viewer tutorial](https://tinyurl.com/2fdmgwxs)
    - [editor tutorial](https://tinyurl.com/2b72v7u6)
    - [search tutorial](https://tinyurl.com/27eukjbp)
    - [syntax highlighting tutorial](https://tinyurl.com/2burb3by)
  ☐ undo & redo

pre built components - multi select chooser:
  ☐ TODO

pre built components - autocompletion provider:
  ☐ TODO

mdns & p2p:
  ☐ Ideate on what this might look like
    - local service discovery
    - easy authentication (cloud auth provider login?)

new stuff:
  ☐ flow editor
  ☐ diagrams
